<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 开启注解处理器 -->  
	<context:annotation-config />
	
	<!-- 注册基于注解，会自动注册DefaultAnnotationHandlerMapping、AnnotationMethodHandlerAdapter -->
	<mvc:annotation-driven />
	
	<!-- 自动扫描包，可以写多个 -->
	<context:component-scan base-package="com.demo.springmvc"></context:component-scan>

	<!-- 加载Properties配置文件，使用自定义的处理Properties -->
	<bean id="propertyConfigurer" class="com.demo.springmvc.config.SpringPropertyPlaceholderConfigurer"> 
	    <property name="locations"> 
	        <list> 
	            <value>classpath:config.properties</value> 
			</list> 
	    </property> 
	</bean>

	<!--配置base数据源 -->
	<!-- <bean id="base" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean> -->
	<!--配置c3p0数据源 -->
	<bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
         <property name="driverClass" value="${db.driverClassName}" />
         <property name="jdbcUrl" value="${db.url}" />               
         <property name="user" value="${db.username}" />
         <property name="password" value="${db.password}" />
         <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
         <property name="minPoolSize" value="${c3p0.minPoolSize}" />
         <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
         <!-- 最大空闲的时间，单位是秒，无用的链接再过时后会被回收 -->
         <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
         <!-- 在当前连接数耗尽的时候，一次获取的新的连接数 -->
         <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
         <property name="maxStatements" value="${c3p0.maxStatements}" />
         <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
         <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
         <property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
         <!--  如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
         <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
	</bean>

	<!--标准事务管理器,控制事务在数据源连接处理时 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="${dataSource}" />
	</bean>
	<!-- 容器事务管理器,JtaTransactionManager,WeblogicJtaTransactionManager...
	表示默认名称transactionManager，类：org.springframework.transaction.jta.JtaTransactionManager
	跟具体容器相关，比如WebLogic容器为WeblogicJtaTransactionManager
	简写方式：
	<tx:jta-transaction-manager/>
	-->
	<!-- 配置事务特性，配置add，delete，update...开始的方法，事务传播特性为required -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="*Query" read-only="true" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="Add*" propagation="REQUIRED" />   
	        <tx:method name="Update*" propagation="REQUIRED" />   
	        <tx:method name="Delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置那些类的方法进行事务管理，当前com.demo.springmvc.service包中的类和子包中所有方法需要 -->	
	<aop:config>
		<aop:pointcut expression="execution(public * com.demo.springmvc.service..*(..))"
			id="trans" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="trans" />
	</aop:config>
	
	<!-- 用注解来实现事务管理,添加@Transactional来标注事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	
	<!--配置Mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="${dataSource}" />
		<!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 -->
		<!-- <property name="configLocation" value="classpath:sqlMapConfig.xml"/> -->
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
		<property name="mapperLocations" value="classpath*:com/demo/springmvc/dao/*.xml" />
		<property name="typeAliasesPackage" value="com.demo.springmvc.model" />
	</bean>

	<!--Mybatis注册basePackage路径下的所有映射器MapperFactoryBean,用分号或逗号设置多个包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.demo.springmvc.dao" />
		<!--属性sqlSessionFactoryBeanName是可选的，当存在多个数据源时需指定sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 静态文件访问方式一：统一配置 -->
	<mvc:default-servlet-handler />
	<!-- 静态文件访问方式二：单独配置，自己写目标location -->
	<!-- <mvc:resources mapping="/images/**" location="/images/" /> <mvc:resources mapping="/css/**" location="/css/" /> <mvc:resources mapping="/js/**" location="/js/" /> -->

	<!-- freemarker 配置 -->
	<bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">   <!--freemark的配置文件类 -->
		<property name="templateLoaderPaths">
			<list>
				<value>/</value>   <!--html文件的存放位置 -->
			</list>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">5</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="number_format">0.######</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="whitespace_stripping">true</prop>
			</props>
		</property>
	</bean>
	<!-- freemarker页面解析器 -->
	<bean id="fmViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="cache" value="true" />
		<property name="prefix" value="/freemarker/" />
		<property name="suffix" value=".html" />
		<property name="order" value="1" />
	</bean>
    
    
	<!-- jsp页面解析器 InternalResourceViewResolver要放在最后,因为找不到对应视图后会直接返回，不会继续往下找，使用order配置查找顺序 -->
	<bean id="jspVviewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="10" />
	</bean>
	
	<!-- 使用Controller作为映射，在controller上不需要写@RequestMapping，即可/controllerName/method,这个不好用，不推荐使用-->
	<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
   	 	<!-- 让URL遵守JAVA的变量命名约定,大小写敏感-->
		<property name="caseSensitive" value="true"></property>
		<!-- URL前缀，比如请求/test,则最终请求会加上前缀变为/className/test -->
		<!-- <property name="pathPrefix" value="/className"></property> -->
		<!-- URL包名，比如请求/test,则最终请求会截取包名controller --> 
		<!-- <property name="basePackage" value="com.demo.springmvc.controller"></property> -->
		<property name="order" value="1" /> 
        <property name="defaultHandler">  
            <!-- If no @Controller match, map path to a view to render; e.g. the "/intro" path would map to the view named "intro" --> 
            <!-- 如果没有匹配的，则会根据请求的URL来返回 -->     
            <bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />  
        </property> 
	</bean>
  	
  
	<!-- 手动注册DefaultAnnotationHandlerMapping，可以指定全局拦截器
	<bean class=org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping>
	    <property name=interceptors>
	        <list>
	            <bean class="com.demo.springmvc.interceptor.LogInterceptor"></bean>
	        </list>
	    </property>
	</bean>-->
	<!-- 全局拦截器：拦截所有的URL请求 -->
	<mvc:interceptors>
	    <!-- 链接式i18n国际化、网址拦截器 -->  
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<bean class="com.demo.springmvc.interceptor.GlobalInterceptor" />
	</mvc:interceptors>
	
	
	<!-- 特定拦截器：拦截特有的URL请求 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/interceptor/test" />
			<bean class="com.demo.springmvc.interceptor.LoginInterceptor" />
		</mvc:interceptor>
		<!--
		<mvc:interceptor>
			<mvc:mapping path="/*/**" />
			<bean class="com.demo.springmvc.interceptor.PermissionInterceptor" />
		</mvc:interceptor>
		-->
	</mvc:interceptors>

	<!-- 全局异常处理 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	    <!-- 默认异常返回视图，当找不到匹配的exceptionMapping时使用 -->
	    <property name="defaultErrorView">
			<value>error</value>
		</property>
		<!-- 默认异常返回码，当找不到匹配的exceptionMapping时使用 -->
		<property name="defaultStatusCode">
			<value>400</value>
		</property>
		<!-- 记录warn级别以上日志 -->
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>
		<property name="exceptionMappings">
			<props>
				<!-- 发生异常，根据视图解析器会转到配置的error视图里面，这里为error.jsp -->
				<prop key="com.demo.springmvc.exception.GlobalException">error</prop>
				<prop key="java.lang.Exception">error</prop>
				<!-- SpringMVC在超出上传文件限制MaxUploadSizeExceededException异常，跳转到error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error</prop>  
			</props>
		</property>
	</bean>
	<!-- 自定义异常处理器 -->
	<bean id="customExceptionResolver" class="com.demo.springmvc.exception.CustomExceptionResolver"/>
	
	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<property name="defaultEncoding" value="UTF-8"/> 
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>
	
	<!-- 输出对象转JSON支持 -->
	 <bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean> 
	
	
	<!-- 默认的注解映射的支持 -->  
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" />
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
   
    <!-- 国际化，bean id必须为messageSource -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <!-- <property name="basename" value="classpath:messages"/> -->  
        <property name="basenames">  
             <list>  
             <value>classpath:messages</value><!-- 配置语言文件的地址的默认配置文件,在这里我是index.properties -->  
            </list> 
         </property>
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="1"/>  
    </bean>

	<!-- Saves a locale change using a session-->    
    <!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" /> -->
    <!-- Saves a locale change using a cookie--> 
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
    
</beans>